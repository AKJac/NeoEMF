/*
 * Copyright (c) 2013-2017 Atlanmod INRIA LINA Mines Nantes.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Atlanmod INRIA LINA Mines Nantes - initial API and implementation
 */

package fr.inria.atlanmod.neoemf.core;

import org.eclipse.emf.ecore.util.EcoreUtil;

import java.util.Objects;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * An {@link Id} with a {@link String} representation.
 */
public class StringId implements Id {

    private static final long serialVersionUID = 1L;

    @Nonnull
    private final String literalId;

    /**
     * Instantiates a new {@code StringId} with its literal representation.
     *
     * @param literalId the literal representation of this {@code StringId}
     */
    public StringId(@Nonnull String literalId) {
        this.literalId = checkNotNull(literalId);
    }

    /**
     * Creates a new instance of an {@link Id} initialized with a {@link String} representation generated by using the
     * {@link EcoreUtil#generateUUID()} method.
     *
     * @return a new instance of an {@link Id}
     *
     * @see EcoreUtil#generateUUID()
     */
    @Nonnull
    public static Id generate() {
        return new StringId(EcoreUtil.generateUUID());
    }

    @Override
    public int compareTo(@Nonnull Id o) {
        return o.toString().compareTo(toString());
    }

    @Nonnull
    @Override
    public Long toLong() {
        throw new UnsupportedOperationException("This Id can not have a Long representation");
    }

    @Override
    public int hashCode() {
        return literalId.hashCode();
    }

    @Override
    public boolean equals(@Nullable Object o) {
        if (o == this) {
            return true;
        }
        if (!(o instanceof StringId)) {
            return false;
        }

        StringId that = (StringId) o;
        return Objects.equals(literalId, that.literalId);
    }

    @Nonnull
    @Override
    public String toString() {
        return literalId;
    }
}
