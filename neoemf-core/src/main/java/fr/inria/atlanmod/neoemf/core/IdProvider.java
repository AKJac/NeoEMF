package fr.inria.atlanmod.neoemf.core;

import fr.inria.atlanmod.commons.hash.Hasher;
import fr.inria.atlanmod.commons.hash.Hashers;

import org.eclipse.emf.ecore.util.EcoreUtil;

import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;

/**
 * A provider of {@link Id} instances.
 */
@ParametersAreNonnullByDefault
public final class IdProvider {

    /**
     * The {@link Hasher} used to generate {@link Id} from string.
     *
     * @see #generate(String)
     */
    @Nonnull
    private static final Hasher HASHER = Hashers.xx();

    /**
     * Creates a new {@link Id} with its original representation.
     *
     * @param value the original representation of the new identifier
     *
     * @return a new instance of an {@link Id}
     */
    @Nonnull
    public static Id create(String value) {
        return new StringId(value);
    }

    /**
     * Creates a new instance of an {@link Id} initialized with a literal representation generated by using the {@link
     * EcoreUtil#generateUUID()} method.
     *
     * @return a new instance of an {@link Id}
     *
     * @see EcoreUtil#generateUUID()
     * @see #generate(String)
     */
    @Nonnull
    public static Id generate() {
        return generate(EcoreUtil.generateUUID());
    }

    /**
     * Creates a new instance of an {@link Id} from the {@code value}.
     * <p>
     * The {@code value} will be hashed to a 64bits hexadecimal value. Several calls to this method with the same {@code
     * value} will return the same identifier.
     *
     * @param value the base value of the identifier
     *
     * @return a new instance of an {@link Id}
     */
    @Nonnull
    public static Id generate(String value) {
        return create(HASHER.hash(value).toHexString());
    }
}
