<%@ jet package="fr.inria.atlanmod.neo4emf.codegen.templates.model" imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* fr.inria.atlanmod.neo4emf.codegen.CodegenUtil " class="MappingReltypesClass"%>
<%
/**
 * Copyright (c) 2002-2006 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors: Amine BENELALLAM
 *   IBM - Initial API and implementation
 */
%>
<% GenPackage genPck = (GenPackage) argument; GenModel genModel= genPck.getGenModel();
 
	     /* Trick to import java.util.* without warnings */Iterator.class.getName();%>
<%@ include file="../Header.javajetinc"%>
package <%=genPck.getInterfacePackageName()%>.reltypes;

<%genModel.addImport("org.neo4j.graphdb.RelationshipType");%>
<%genModel.addImport("fr.inria.atlanmod.neo4emf.Point");%>
<%genModel.addImport("java.util.Map");%>
<%genModel.addImport("java.util.HashMap");%>
<%genModel.markImportLocation(stringBuffer);%>
<% for (GenPackage genPackage : genModel.getAllGenPackagesWithClassifiers())
	 genModel.addImport(genPackage.getReflectionPackageName()+"."+genPackage.getPackageInterfaceName());%>

	/**
 	* <!-- begin-user-doc -->
 	* Neo4j <b>relationships mapping</b> for model persistence.
 	* It provides hashmaps to map relationships to the appropriate feature ID.
 	* <!-- end-user-doc -->
 	* @generated
 	*/
public class ReltypesMappings {
<%if (genModel.hasCopyrightField()) {%>
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final <%=genModel.getImportedName("java.lang.String")%> copyright = <%=genModel.getCopyrightFieldLiteral()%>;<%=genModel.getNonNLS()%>

<%}%>
	private static ReltypesMappings instance;
	
	
	/**
	 * 
	 * @generated
	 */
	 
	public static ReltypesMappings getInstance(){
		if (instance == null)
			return new ReltypesMappings ();
		else return instance;
		}
		
	/**
	 *getter of the Map
	 * @generated
	 */
		public Map<String,Map<Point,RelationshipType>> getMap(){
		return reference2relation;
	}
	
	/**
	 * constructor of Relationship type mappings
	 * @generated
	 */
		private final Map<String,Map<Point,RelationshipType>> reference2relation;
	
		private ReltypesMappings (){
			
			reference2relation= new HashMap<String,Map<Point,RelationshipType>>();		
<% for (GenPackage genPackage : genModel.getAllGenPackagesWithClassifiers()){ int i=0;%>
		
			
		<%for (GenClassifier genClassifier : genPackage.getOrderedGenClassifiers()) { 
			if (genClassifier instanceof GenClass) {
				i++; if (i == 1){%>
					Map<Point,RelationshipType> map<%=genPackage.getPackageInterfaceName()%> = new HashMap<Point,RelationshipType>();
				<%} 
				GenClass cls = (GenClass)genClassifier; 
				for (GenFeature feat : CodegenUtil.getEAllGenFeatures(cls)) {
    				if(feat.isReferenceType()){
    				%>
			map<%=genPackage.getPackageInterfaceName()%>.put(new Point(<%=genPackage.getPackageInterfaceName()%>.<%=cls.getClassifierID()
		%>,<%=genPackage.getPackageInterfaceName()%>.<%=cls.getFeatureID(feat)%>),Reltypes.<%=cls.getFeatureID(feat)%>);
					<%		}
						}
					}
				}
				if (i > 0){%>
			reference2relation.put(<%=genPackage.getPackageInterfaceName()%>.eNS_URI,map<%=genPackage.getPackageInterfaceName()%>);
		<%}
		}%>
		}
		
	/**
	* Getting a Relationship from an eRef belonging to 
	* an {@link EObject} eObject
	*@param eObject {@link EObject}
	*@param eRef {@link EReference}
	*@generated
	*/
	//public RelationshipType getReltype(EObject eObject, EReference eRef) {
		//	String key = eObject.eClass().getEPackage().getNsURI();		
			//return getMap().get(key).get(new Point(eObject.eClass().getClassifierID(), eRef.getFeatureID()));
		//}
} 
	
//Reltypes Class
<%genModel.emitSortedImports();%>
