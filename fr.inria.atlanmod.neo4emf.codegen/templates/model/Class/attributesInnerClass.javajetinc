<%// Attribute class generation%>
<%boolean hasSuperClass = !genClass.getEcoreClass().getESuperTypes().isEmpty();
String attributeClassName = CodegenUtil.getAttributeClassName(genClass);%>
/**
*  <%=genClass.getClassExtends()%>
*  <%=genClass.getEcoreClass().getESuperTypes().size()%>
*
*/
protected static class <%=attributeClassName%><%=genClass.getTypeParameters().trim()%><%=CodegenUtil.getAttributeClassExtends(genClass)%>{

<% if (genModel.hasCopyrightField()) {%>
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	<%=publicStaticFinalFlag%><%=genModel.getImportedName("java.lang.String")%> copyright = <%=genModel.getCopyrightFieldLiteral()%>;<%=genModel.getNonNLS()%>

<%}%>

	/**
	 *Constructor of <%=attributeClassName%>
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public <%=attributeClassName%>() {
  <%for (GenFeature genFeature : genClass.getFlagGenFeaturesWithDefault()) {%>
		<%=genClass.getFlagsField(genFeature)%> |= <%=genFeature.getUpperName()%>_EFLAG<%if (!genFeature.isBooleanType()) {%>_DEFAULT<%}%>;
  <%}%>
	}


	/**
	 * Constructor of <%=attributeClassName%>
	 * Initializes multi-valued fields, if any.
	 *
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public <%=attributeClassName%>(<%=genClass.getClassName()%> outer) {
		<%if (hasSuperClass){%> super(outer); <%}%>
  <%for (GenFeature genFeature : genClass.getFlagGenFeaturesWithDefault()) {%>
		<%=genClass.getFlagsField(genFeature)%> |= <%=genFeature.getUpperName()%>_EFLAG<%if (!genFeature.isBooleanType()) {%>_DEFAULT<%}%>;
  <%}%>
 <%for (GenFeature genFeature : genClass.getToStringGenFeatures()) {
	 if (genFeature.isListType()){
		 String fName = genFeature.getSafeName();
		 %>
		<%=fName%> = new <%=genClass.getListConstructor(genFeature).replace("this","outer")%>;<%
	 }
}%>
	}


  <%for (GenFeature genFeature : genClass.getDeclaredFieldGenFeatures()) {%>
<%@ include file="declaredFieldGenFeature.override.javajetinc" fail="silent" %>
  <%}%>
<%if (genModel.isOperationReflection() && isImplementation && genClass.hasOffsetCorrection() && !genClass.getImplementedGenOperations().isEmpty()) {%>
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final int "EOPERATION_OFFSET_CORRECTION" = <%=genClass.getQualifiedClassifierAccessor()%>.getOperationID(<%=genClass.getImplementedGenOperations().get(0).getQualifiedOperationAccessor()%>) - <%=genClass.getQualifiedOperationID(genClass.getImplementedGenOperations().get(0))%>;

<%}%>
<%if (isImplementation ) {%>

	
		<%if ( CodegenUtil.getAttributeClassExtends(genClass) !=""){%>
	/**
	 *Constructor of <%=attributeClassName%>%>
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param {@link <%=genClass.getClassExtendsGenClass().getInterfaceName()%> }
	 * @generated
	 */
	<%}%>
	
    <%if (!genModel.isDynamicDelegation() && !genModel.isVirtualDelegation()){%>
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String toString(){	
		StringBuffer result = new StringBuffer(super.toString());
  <%{ boolean first = true;%>		
    <%for (GenFeature genFeature : genClass.getToStringGenFeatures()) {%>
      <%if (first) { first = false;%>
		result.append(" (<%=genFeature.getName()%>: ");<%=genModel.getNonNLS()%>
      <%} else {%>
		result.append(", <%=genFeature.getName()%>: ");<%=genModel.getNonNLS()%>
      <%}%>
      <%if (genFeature.isUnsettable() && !genFeature.isListType()) {%>
        <%if (genModel.isVirtualDelegation() && !genFeature.isPrimitiveType()) {%>
		if (eVirtualIsSet(<%=genClass.getQualifiedFeatureID(genFeature)%><%=positiveOffsetCorrection%>)) result.append(eVirtualGet(<%=genClass.getQualifiedFeatureID(genFeature)%><%=positiveOffsetCorrection%>)); else result.append("<unset>");<%=genModel.getNonNLS()%>
        <%} else {%>
          <%if (genClass.isFlag(genFeature)) {%>
            <%if (genFeature.isBooleanType()) {%>
		if (<%if (genClass.isESetFlag(genFeature)) {%>(<%=genClass.getESetFlagsField(genFeature)%> & <%=genFeature.getUpperName()%>_ESETFLAG) != 0<%} else {%><%=genFeature.getUncapName()%>ESet<%}%>) result.append((<%=genClass.getFlagsField(genFeature)%> & <%=genFeature.getUpperName()%>_EFLAG) != 0); else result.append("<unset>");<%=genModel.getNonNLS()%>
            <%} else {%>
		if (<%if (genClass.isESetFlag(genFeature)) {%>(<%=genClass.getESetFlagsField(genFeature)%> & <%=genFeature.getUpperName()%>_ESETFLAG) != 0<%} else {%><%=genFeature.getUncapName()%>ESet<%}%>) result.append(<%=genFeature.getUpperName()%>_EFLAG_VALUES[(<%=genClass.getFlagsField(genFeature)%> & <%=genFeature.getUpperName()%>_EFLAG) >>> <%=genFeature.getUpperName()%>_EFLAG_OFFSET]); else result.append("<unset>");<%=genModel.getNonNLS()%>
            <%}%>
          <%} else {%>
		if (<%if (genClass.isESetFlag(genFeature)) {%>(<%=genClass.getESetFlagsField(genFeature)%> & <%=genFeature.getUpperName()%>_ESETFLAG) != 0<%} else {%><%=genFeature.getUncapName()%>ESet<%}%>) result.append(<%=genFeature.getSafeName()%>); else result.append("<unset>");<%=genModel.getNonNLS()%>
          <%}%>
        <%}%>
      <%} else {%>
        <%if (genModel.isVirtualDelegation() && !genFeature.isPrimitiveType()) {%>
		result.append(eVirtualGet(<%=genClass.getQualifiedFeatureID(genFeature)%><%=positiveOffsetCorrection%><%if (!genFeature.isListType() && !genFeature.isReferenceType()){%>, <%=genFeature.getEDefault()%><%}%>));
        <%} else {%>
          <%if (genClass.isFlag(genFeature)) {%>
          <%if (genFeature.isBooleanType()) {%>
		result.append((<%=genClass.getFlagsField(genFeature)%> & <%=genFeature.getUpperName()%>_EFLAG) != 0);
          <%} else {%>
		result.append(<%=genFeature.getUpperName()%>_EFLAG_VALUES[(<%=genClass.getFlagsField(genFeature)%> & <%=genFeature.getUpperName()%>_EFLAG) >>> <%=genFeature.getUpperName()%>_EFLAG_OFFSET]);
          <%}%>
          <%} else {%>
		result.append(<%=genFeature.getSafeName()%>);
          <%}%>
        <%}%>
      <%}%>
    <%}%>
  <%}%>
		result.append(')');
		return result.toString();
	}
	<%}%>	
<%}%>

<%genModel.addImport("org.neo4j.graphdb.Node");%>
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void loadAllAttributesFrom(Node n) {
<%if (hasSuperClass) {%>
		super.loadAllAttributesFrom(n);
<%}%>
<%if (!allAttributes.isEmpty()) {%>
		Object aux;
<%}%>
<%for (GenFeature genFeature : genClass.getToStringGenFeatures()) {
	String fName = genFeature.getSafeName();
	String fType = genFeature.getImportedInternalType(genClass);
	if (genFeature.isVolatile()) {
		%>/* <%=genFeature.getSafeName()%> --- Volatile features are not loaded.*/
			<%
		continue;
	}
	%>
		aux = n.getProperty("<%=fName%>", null);
		if (aux != null) {<%
	if (genFeature.isListType()) {
		if ("BigDecimal".equals(genFeature.getListItemType(genClass))) {
		%>
			double[] <%=fName%>Aux = (double[]) aux;
			for(int i = 0; i < <%=fName%>Aux.length; i++) {
				<%=fName%>.add(<%=genFeature.getListItemType(genClass)%>.valueOf(<%=fName%>Aux[i]));
			}
		<%
		}
		else if ("BigInteger".equals(genFeature.getListItemType(genClass))) {
			%>
				long[] <%=fName%>Aux = (long[]) aux;
				for(int i = 0; i < <%=fName%>Aux.length; i++) {
					<%=fName%>.add(<%=genFeature.getListItemType(genClass)%>.valueOf(<%=fName%>Aux[i]));
				}
			<%			
		}
		else {
		%>
			List<<%=genFeature.getListItemType(genClass)%>> <%=fName%>Aux = Arrays.asList((<%=genFeature.getListItemType(genClass)%>[]) aux);
			<%=fName%>.addAll(<%=fName%>Aux);<%
		}
	} else {
		if (genFeature.isEnumType()) {
			%>
			<%=fName%> = <%=fType%>.get((int) aux); // Enumeration type
			<%
		}
		else if (genFeature.isPrimitiveType() || "String".equals(genFeature.getImportedInternalType(genClass))) {
			%>
			<%=genFeature.getSafeName()%> = (<%=genFeature.getImportedInternalType(genClass)%>) aux;<%
		}
		else if ("BigInteger".equals(genFeature.getImportedInternalType(genClass))) {
			%>
			<%=genFeature.getSafeName()%> = BigInteger.valueOf((long) aux);<%
		} 
		else if ("BigDecimal".equals(genFeature.getImportedInternalType(genClass))) {
			%>
			<%=genFeature.getSafeName()%> = BigDecimal.valueOf((double) aux);<%
		}
		else {
			%>
			<%=fName%> = (<%=fType%>) aux; // Object type : <%=fName%><%
		}
	}
	%>
		} <%
}//for%>
	}


	/**
 	* <!-- begin-user-doc -->
 	* <!-- end-user-doc -->
 	* @generated
 	*/
	public void saveAllAttributesTo(Node n) {
		<%if (hasSuperClass) {%>
		super.saveAllAttributesTo(n);
		<%}//if%>
		<%for (GenFeature each : allAttributes) {
			String fName = each.getSafeName();%>
		this.save<%=fName%>To(n);<%
		}//for%>
	} // saveTo()
	
	/**
 	* <!-- begin-user-doc -->
 	* <!-- end-user-doc -->
 	* @generated
 	*/
	public void saveAttributeTo(int featureID, Node n) {
		switch (featureID) {
			<%for (GenFeature each : allAttributes) {
				String fName = each.getSafeName();%>
			case <%=genClass.getQualifiedFeatureID(each)%>:
				this.save<%=fName%>To(n);
				return;<%
			}//for%>
		} // switch
	} // saveAttributeTo()
	

<%for (GenFeature each : singlevaluedAttributes) {
	String fName = each.getSafeName();
	String fType = each.getImportedInternalType(genClass);
%>
	/*
	*
	*/
	private void save<%=fName%>To(Node n) {
	<%if ("boolean".equals(fType)) {
		%>
		n.setProperty("<%=fName%>", <%=fName%>);<%				
	}
	else if ("BigInteger".equals(fType)) {
		%>
		if (<%=fName%> != null) n.setProperty("<%=fName%>", <%=fName%>.longValue());<%
	} 
	else if ("BigDecimal".equals(fType)) {
		%>
		if (<%=fName%> != null) n.setProperty("<%=fName%>", <%=fName%>.doubleValue());<%
	}
	else { // Probably a primitive type 
		%>
		if (<%=fName%> != null) n.setProperty("<%=fName%>", <%=fName%>);<%
	}%>
	} 
	
<%} // for%>
<%for (GenFeature each : enumerationAttributes) {
	String fName = each.getSafeName();
	String fType = each.getImportedInternalType(genClass);
%>
	/*
	*
	*/
	private void save<%=fName%>To(Node n) {
		if (<%=fName%> != null) n.setProperty("<%=fName%>", <%=fName%>.getValue());
	}<%
} // for%>

<%for (GenFeature each : multivaluedAttributes) {
	String fName = each.getSafeName();
	String fType = each.getListItemType(genClass);%>
	/*
	*
	*/
	private void save<%=fName%>To(Node n) {
		<%if ("BigDecimal".equals(fType)){
			%>
			if (<%=fName%> != null) {
				double[] aux = new double[<%=fName%>.size()];
				for (int i = 0; i < aux.length; i++) {
					aux[i] = <%=fName%>.get(i).doubleValue();
				}
				n.setProperty("<%=fName%>", aux);
			}<%				
		}
		else if ("BigInteger".equals(fType)) {
			%>
			if (<%=fName%> != null) {
				long[] aux = new long[<%=fName%>.size()];
				for (int i = 0; i < aux.length; i++) {
					aux[i] = <%=fName%>.get(i).longValue();
				}
				n.setProperty("<%=fName%>", aux);
			}<%						
		}
		else{
			%>
			if (<%=fName%> != null) n.setProperty("<%=fName%>", <%=fName%>.toArray());
			<%
		}%>
	}<%
} // for%>


}//end attribute class