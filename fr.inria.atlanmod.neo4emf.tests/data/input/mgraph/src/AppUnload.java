import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import mgraph.MGraph;
import mgraph.MNode;
import mgraph.MgraphFactory;
import mgraph.MgraphPackage;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;

import fr.inria.atlanmod.neo4emf.INeo4emfResource;
import fr.inria.atlanmod.neo4emf.INeo4emfResourceFactory;
import fr.inria.atlanmod.neo4emf.change.impl.ChangeLog;
import fr.inria.atlanmod.neo4emf.change.impl.Entry;
import fr.inria.atlanmod.neo4emf.impl.Neo4emfResource;


public class AppUnload {

	private static MgraphFactory factory;
	
	private static void deleteDirectoryIfExists(final File file)
	{ 
		if (! file.exists()) return;
		if (file.isDirectory()) {
			for (File child : file.listFiles())
				deleteDirectoryIfExists(child);
		}
		else file.delete();
	}
	
	private static void clearSoftReferences() {
		try {
		    Object[] ignored = new Object[(int) Runtime.getRuntime().maxMemory()];
		} catch (Throwable e) {
		    // Ignore OME
		}
	}
	
	private static void tmpSave(INeo4emfResource resource) {
		Map<String,Object> options = new HashMap<String,Object>();
		options.put("tmp_save", true);
		try {
			resource.save(options);
		}catch(IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void save(INeo4emfResource resource) {
		try {
			resource.save(null);
		}catch(IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		deleteDirectoryIfExists(new File("./Test"));
		ResourceSet resourceSet = new ResourceSetImpl();
		// Create an URI with neo4emf as protocol 
		URI uri = URI.createURI("neo4emf:/./Test");
		// attach this protocol to INeo4emfResourceFactory 
		resourceSet.getResourceFactoryRegistry().getProtocolToFactoryMap().put("neo4emf", 
				INeo4emfResourceFactory.eINSTANCE.setRelationshipsMap(mgraph.reltypes
						.ReltypesMappings.getInstance().getMap()));
		// Create the resource
		INeo4emfResource resource = (INeo4emfResource) resourceSet.createResource(uri);
		// Register the package
		EPackage.Registry.INSTANCE.put(MgraphPackage.eINSTANCE.getNsURI(), MgraphPackage.eINSTANCE);
		factory = MgraphFactory.eINSTANCE;
		
		// base graph
		MGraph graph = factory.createMGraph();
		resource.getContents().add(graph);
		graph.setName("gName");
		MNode node = factory.createMNode();
		node.setName("n1");
		graph.getNodes().add(node);
		
		save(resource);
		
		resource.unload();
		// clear needed because of null entries generated by the 
		// ChangeLog factory on unknown notification.
		resource.getChangeLog().clear();
		// updated graph
		try {
			resource.load(null);
		}catch(IOException e) {
			e.printStackTrace();
		}
		
		EList<EObject> contents = resource.getContents();
		MGraph loadedGraph = ((MGraph)contents.get(0));
		loadedGraph.setName("tagada");
		MNode node2 = factory.createMNode();
		node2.setName("n2");
		loadedGraph.getNodes().add(node2);
		
		tmpSave(resource);
		clearSoftReferences();
		
		MNode node3 = factory.createMNode();
		node3.setName("n3");
		loadedGraph.getNodes().add(node3);
//		tmpSave(resource);
//		save(resource);
			
		try {
			resource.load(null);
		}catch(IOException e) {
			e.printStackTrace();
		}
		/*loadedGraph.setName("foo");
		System.out.println("Resource has been committed, try a hard save to flush the content");
		try {
			resource.save(null);
		}catch(IOException e) {
			e.printStackTrace();
		}*/
	}
// -XX:+HeapDumpOnOutOfMemoryError
}
